## 🎀 5장 표현식과 문

### 📌 값
값(value)은 표현식(expression)이 평가(evaluate)되어 생성된 결과를 말한다.
```js
// 10 + 20은 평가되어 30이라는 숫자 값을 생성한다.
10 + 20; // 30
```
변수에는 10 + 20이 평가되어 생성된 값이 할당된다.
```js
var sum = 10 + 20; // 30
```

### 📌 리터럴
리터럴(literal)은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법을 말한다.
| 리터럴 |       예시     |  비고 |
|------|---------------|------|
|정수 리터럴|100||
|부동소수점 리터럴|10.5|테스트3|
|2진수 리터럴|0o101|0b로 시작|
|문자열 리터럴|"world"||
|불리언 리터럴|true / false||
|null 리터럴|null||
|undefined 리터럴|undefined||
|객체 리터럴|{name: "Lee", address: "Seoul"}||
|배열 리터럴|[1, 2, 3]||
|함수 리터럴|function(){}||
|정규 표현식 리터럴|/[A-Z]+/g||

### 📌 표현식(expression)
값으로 평가될 수 있는 문은 모두 표현식이다.
```js
// 리터럴 표현식
10
"world"

// 식별자 표현식(선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10 + 20
sum = 10
syn !== 10

// 함수/메서드 호출 표현식
square()
person.getName()
```

### 📌 문(statement)
문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.

문은 여러 토큰(문법적으로 더 이상 나눌 수 없는 코드의 기본 요소)으로 구성된다.
<img src="https://github.com/mingzzi96/js-deep-dive-study/assets/134386378/2365549b-27c8-404c-a836-312606a02973" width="600px"/>

### 📌 표현식이 아닌 문
```js
// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다. 표현식은 아니지만 문이라고 할 수 있다.
var sum;
```
